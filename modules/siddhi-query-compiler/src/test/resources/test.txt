
from  ( from StockStream[StockStream.price >= 20][ StockStream.price is null]
                        select symbol, avg(price) as avgPrice
                        return )
                        select symbol, avgPrice
                        insert into OutStockStream

/**
from  StockStream[price>3]#window.length(50)
                        select symbol, avg(price) as avgPrice
                        group by symbol
                        having (price >= 20)
                        insert all events into StockQuote;


from `Stream1`[price> 5.0d and symbol == 'IBM' or volume <= 5f+3.3/6E45 or false]
--from Stream1[price> 6E45 and symbol == 'IBM' or volume <= 5f+3.3/6.0]
insert into Stream2;

partition with (symbol of Stream1, random() of Stream2, v<2 as 'small' or v>=price as 'large' of Stream3 )
begin

    from Stream1 insert into stream2;

end;

from every a1=StreamA within 6 min , a3=Test*, not Beta within 2 min
select a3[0].symbol, a3[last-2].price, select
insert into StreamC;

from every a1=StreamA within 6 min ->  a3=Test<:4> -> not Beta within 2 min
select a3[0].symbol, a3[last-2].price
insert into StreamC;

from every (a1=StreamA ->  StreamB ) within 6 min -> not Test and Foo -> not Beta within 2 min
insert into StreamC;

from every (a1=StreamA ->  StreamB )  -> Test and Foo
insert into StreamC;

from StreamA -> StreamB
insert into StreamC;

from StreamA join StreamB
on StreamA.price == StreamB.price
select avg(StreamA.price), StreamB.price as foo
insert into StreamC;

--Test
from Stream1[symbol == 'IBM']#stamk:reg(price)#reg(volume)
select price, symbol, Stream1#reg[0].priceM, Stream1#reg[1].m
insert into Stream2;

from Stream1[price> 5 and symbol == 'IBM' or volume <= 5+3/6]
insert into Stream2;

from Stream1
insert into Stream2;

@source( db.name ='test', `select`.p='test1')
define table Test (symbol string, price double);

define stream Test (symbol string, price double);



define stream Test (symbol string, price double);

define table Test (symbol string, price double);

@from(dbname ='test')
define table Test (symbol string, price double);

*/